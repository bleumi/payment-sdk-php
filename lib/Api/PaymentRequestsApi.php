<?php
/**
 * PaymentRequestsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Bleumi\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bleumi Payment API
 *
 * A simple and powerful REST API to integrate Traditional (Credit/Debit Card, Alternative Payment Methods) and Crypto Currency (Bitcoin, Ethereum, Stablecoins) payments into your business or application.  ### Getting Started 1. Create an account on [Bleumi](https://account.bleumi.com/signUp/?app=payment) 1. Fill up your [profile](https://account.bleumi.com/account/?app=payment&tab=profile) 1. Complete your KYC by contacting [support@bleumi.com](mailto:support@bleumi.com) 1. Add your preferred payment service providers in the [Bleumi Portal](https://account.bleumi.com/account/?app=payment&tab=gateway) 1. Create your API key on the [Bleumi Integration Settings](https://account.bleumi.com/account/?app=payment&tab=integration) screen  ### Authentication Bleumi uses API keys to authenticate requests. You can view and manage your API keys in the [Bleumi Integration Settings](https://account.bleumi.com/account/?app=payment&tab=integration) screen. Authenticated API requests should be made with a `X-Api-Key` header. Your API key should be passed as the value.  ### Payment Methods Use the [Bleumi Portal](https://account.bleumi.com/account/?app=payment&tab=gateway) to add your preferred payment service provider (e.g. Stripe, BitPay, Bleumi Pay) and configure the payment methods that buyers would be able to use to make payments.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@bleumi.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bleumi\Payment\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bleumi\Payment\ApiException;
use Bleumi\Payment\Configuration;
use Bleumi\Payment\HeaderSelector;
use Bleumi\Payment\ObjectSerializer;

/**
 * PaymentRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  Bleumi\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPaymentRequest
     *
     * @param  \Bleumi\Payment\Model\CreatePaymentInput $create_payment_input create_payment_input (optional)
     *
     * @throws \Bleumi\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bleumi\Payment\Model\PaymentUpsertResponse|\Bleumi\Payment\Model\BadRequest
     */
    public function createPaymentRequest($create_payment_input = null)
    {
        list($response) = $this->createPaymentRequestWithHttpInfo($create_payment_input);
        return $response;
    }

    /**
     * Operation createPaymentRequestWithHttpInfo
     *
     * @param  \Bleumi\Payment\Model\CreatePaymentInput $create_payment_input (optional)
     *
     * @throws \Bleumi\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bleumi\Payment\Model\PaymentUpsertResponse|\Bleumi\Payment\Model\BadRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentRequestWithHttpInfo($create_payment_input = null)
    {
        $request = $this->createPaymentRequestRequest($create_payment_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bleumi\Payment\Model\PaymentUpsertResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bleumi\Payment\Model\PaymentUpsertResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bleumi\Payment\Model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bleumi\Payment\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bleumi\Payment\Model\PaymentUpsertResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bleumi\Payment\Model\PaymentUpsertResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bleumi\Payment\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentRequestAsync
     *
     * 
     *
     * @param  \Bleumi\Payment\Model\CreatePaymentInput $create_payment_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentRequestAsync($create_payment_input = null)
    {
        return $this->createPaymentRequestAsyncWithHttpInfo($create_payment_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentRequestAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Bleumi\Payment\Model\CreatePaymentInput $create_payment_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentRequestAsyncWithHttpInfo($create_payment_input = null)
    {
        $returnType = '\Bleumi\Payment\Model\PaymentUpsertResponse';
        $request = $this->createPaymentRequestRequest($create_payment_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentRequest'
     *
     * @param  \Bleumi\Payment\Model\CreatePaymentInput $create_payment_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentRequestRequest($create_payment_input = null)
    {

        $resourcePath = '/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_payment_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_payment_input));
            } else {
                $httpBody = $create_payment_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPaymentRequests
     *
     * @param  string $next_token Cursor to start results from (optional)
     * @param  string $sort_by &#x60;createdAt&#x60; - results will be sorted by created time. &#x60;updatedAt&#x60; - results will be sorted by last updated time. (optional)
     * @param  string $sort_order &#x60;ascending&#x60; - &#x60;(Default)&#x60; results will be sorted in asceding order. &#x60;descending&#x60; - results will be sorted in descending order. (optional)
     * @param  string $start_at Get payments from this timestamp &#x60;(unix)&#x60; (optional)
     * @param  string $end_at Get payments till this timestamp &#x60;(unix)&#x60; (optional)
     *
     * @throws \Bleumi\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bleumi\Payment\Model\PaginatedPaymentRequest|\Bleumi\Payment\Model\BadRequest
     */
    public function listPaymentRequests($next_token = null, $sort_by = null, $sort_order = null, $start_at = null, $end_at = null)
    {
        list($response) = $this->listPaymentRequestsWithHttpInfo($next_token, $sort_by, $sort_order, $start_at, $end_at);
        return $response;
    }

    /**
     * Operation listPaymentRequestsWithHttpInfo
     *
     * @param  string $next_token Cursor to start results from (optional)
     * @param  string $sort_by &#x60;createdAt&#x60; - results will be sorted by created time. &#x60;updatedAt&#x60; - results will be sorted by last updated time. (optional)
     * @param  string $sort_order &#x60;ascending&#x60; - &#x60;(Default)&#x60; results will be sorted in asceding order. &#x60;descending&#x60; - results will be sorted in descending order. (optional)
     * @param  string $start_at Get payments from this timestamp &#x60;(unix)&#x60; (optional)
     * @param  string $end_at Get payments till this timestamp &#x60;(unix)&#x60; (optional)
     *
     * @throws \Bleumi\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bleumi\Payment\Model\PaginatedPaymentRequest|\Bleumi\Payment\Model\BadRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPaymentRequestsWithHttpInfo($next_token = null, $sort_by = null, $sort_order = null, $start_at = null, $end_at = null)
    {
        $request = $this->listPaymentRequestsRequest($next_token, $sort_by, $sort_order, $start_at, $end_at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bleumi\Payment\Model\PaginatedPaymentRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bleumi\Payment\Model\PaginatedPaymentRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bleumi\Payment\Model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bleumi\Payment\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bleumi\Payment\Model\PaginatedPaymentRequest';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bleumi\Payment\Model\PaginatedPaymentRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bleumi\Payment\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPaymentRequestsAsync
     *
     * 
     *
     * @param  string $next_token Cursor to start results from (optional)
     * @param  string $sort_by &#x60;createdAt&#x60; - results will be sorted by created time. &#x60;updatedAt&#x60; - results will be sorted by last updated time. (optional)
     * @param  string $sort_order &#x60;ascending&#x60; - &#x60;(Default)&#x60; results will be sorted in asceding order. &#x60;descending&#x60; - results will be sorted in descending order. (optional)
     * @param  string $start_at Get payments from this timestamp &#x60;(unix)&#x60; (optional)
     * @param  string $end_at Get payments till this timestamp &#x60;(unix)&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentRequestsAsync($next_token = null, $sort_by = null, $sort_order = null, $start_at = null, $end_at = null)
    {
        return $this->listPaymentRequestsAsyncWithHttpInfo($next_token, $sort_by, $sort_order, $start_at, $end_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPaymentRequestsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $next_token Cursor to start results from (optional)
     * @param  string $sort_by &#x60;createdAt&#x60; - results will be sorted by created time. &#x60;updatedAt&#x60; - results will be sorted by last updated time. (optional)
     * @param  string $sort_order &#x60;ascending&#x60; - &#x60;(Default)&#x60; results will be sorted in asceding order. &#x60;descending&#x60; - results will be sorted in descending order. (optional)
     * @param  string $start_at Get payments from this timestamp &#x60;(unix)&#x60; (optional)
     * @param  string $end_at Get payments till this timestamp &#x60;(unix)&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentRequestsAsyncWithHttpInfo($next_token = null, $sort_by = null, $sort_order = null, $start_at = null, $end_at = null)
    {
        $returnType = '\Bleumi\Payment\Model\PaginatedPaymentRequest';
        $request = $this->listPaymentRequestsRequest($next_token, $sort_by, $sort_order, $start_at, $end_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPaymentRequests'
     *
     * @param  string $next_token Cursor to start results from (optional)
     * @param  string $sort_by &#x60;createdAt&#x60; - results will be sorted by created time. &#x60;updatedAt&#x60; - results will be sorted by last updated time. (optional)
     * @param  string $sort_order &#x60;ascending&#x60; - &#x60;(Default)&#x60; results will be sorted in asceding order. &#x60;descending&#x60; - results will be sorted in descending order. (optional)
     * @param  string $start_at Get payments from this timestamp &#x60;(unix)&#x60; (optional)
     * @param  string $end_at Get payments till this timestamp &#x60;(unix)&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPaymentRequestsRequest($next_token = null, $sort_by = null, $sort_order = null, $start_at = null, $end_at = null)
    {

        $resourcePath = '/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($next_token !== null) {
            if('form' === 'form' && is_array($next_token)) {
                foreach($next_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nextToken'] = $next_token;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentRequest
     *
     * @param  \Bleumi\Payment\Model\UpdatePaymentInput $update_payment_input update_payment_input (optional)
     *
     * @throws \Bleumi\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bleumi\Payment\Model\PaymentUpsertResponse|\Bleumi\Payment\Model\BadRequest
     */
    public function updatePaymentRequest($update_payment_input = null)
    {
        list($response) = $this->updatePaymentRequestWithHttpInfo($update_payment_input);
        return $response;
    }

    /**
     * Operation updatePaymentRequestWithHttpInfo
     *
     * @param  \Bleumi\Payment\Model\UpdatePaymentInput $update_payment_input (optional)
     *
     * @throws \Bleumi\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bleumi\Payment\Model\PaymentUpsertResponse|\Bleumi\Payment\Model\BadRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentRequestWithHttpInfo($update_payment_input = null)
    {
        $request = $this->updatePaymentRequestRequest($update_payment_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bleumi\Payment\Model\PaymentUpsertResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bleumi\Payment\Model\PaymentUpsertResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bleumi\Payment\Model\BadRequest' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bleumi\Payment\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bleumi\Payment\Model\PaymentUpsertResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bleumi\Payment\Model\PaymentUpsertResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bleumi\Payment\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentRequestAsync
     *
     * 
     *
     * @param  \Bleumi\Payment\Model\UpdatePaymentInput $update_payment_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentRequestAsync($update_payment_input = null)
    {
        return $this->updatePaymentRequestAsyncWithHttpInfo($update_payment_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentRequestAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Bleumi\Payment\Model\UpdatePaymentInput $update_payment_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentRequestAsyncWithHttpInfo($update_payment_input = null)
    {
        $returnType = '\Bleumi\Payment\Model\PaymentUpsertResponse';
        $request = $this->updatePaymentRequestRequest($update_payment_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentRequest'
     *
     * @param  \Bleumi\Payment\Model\UpdatePaymentInput $update_payment_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentRequestRequest($update_payment_input = null)
    {

        $resourcePath = '/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_payment_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_payment_input));
            } else {
                $httpBody = $update_payment_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
